#!/usr/bin/env ruby
$: << File.expand_path(File.join(File.dirname(__FILE__) , '../lib'))

require "json_browser"
require 'json'


option_parser = OptionParser.new do |opts| 
  executable_name = File.basename $PROGRAM_NAME
  opts.banner = "  Interactively browse a JSON file
  Usage: #{executable_name} json_file
  "
end

option_parser.parse!

def execute_command(command, current_context)
	case command
	when /^ls$/
		puts current_context.to_s
	when /^cd (.*)/
		new_context = current_context.cd($1)
		if new_context.nil?
			puts "No such key #{$1}"
		else
			current_context = new_context
		end
	when /^cat (.*)$/
		item = current_context.cat($1)
		if item.nil?
			puts "No such item #{$1}"
		else
			puts item.inspect
		end
	when /^help$/
		puts "cat <item> - print the contents of <item> in the current context"
		puts "cd <item> - change context to the context of <item>"
		puts "cd .. - change up one level"
		puts "ls - list available items in the current context"
	end 
	current_context
end

def main(json_file)
	root = JSON.parse(File.read(json_file))
	command = nil
	
	current_context = JsonBrowser::Context.new(root,nil)
	
	while command != 'exit'
		command = Readline.readline("> ",true)
		break if command.nil?
		# execute the command
		current_context = execute_command(command.strip, current_context)
	end
end

json_file = ARGV.shift
if json_file && File.exists?(json_file)
	main(json_file)
else
	STDERR.puts "error: you must provide a JSON file as an argument"
	exit 1
end

