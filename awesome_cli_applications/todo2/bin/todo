#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
#$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '../lib')
$: << File.expand_path(File.join(File.dirname(File.realpath(__FILE__)) , '../lib'))
require 'todo'

program_desc 'Describe your application here'
version Todo::VERSION

desc 'Global switch for specify debug mode'
switch [:d,:debug]

defaults = YAML.load_file(File.join(File.dirname(File.realpath(__FILE__)),'.todo.rc.yaml'))

desc 'Path to the todo file'
default_value defaults[:filename] || "./todo.txt"
arg_name 'todo_file'
flag [:f,:file]

desc "URL to JIRA"
arg_name 'url'
flag [:url]
desc "Username to JIRA"
arg_name 'username'
flag [:username]
desc "Password to JIRA"
arg_name 'password'
flag [:password]


desc 'Create a new task in task list'
long_desc """
A task has a name and a priority. By default, new
tasks have the lowest possible priority, though
this can be overridden.
"""
arg_name 'task_name'
command :new do |c|
  c.desc 'create a task as first task in our task list'
  c.switch [:f,:first]

  c.desc 'set the priority of the new task, 1 being the highest'
  c.default_value defaults[:p] || '10'
  c.arg_name 'priority'
  c.flag [:p,:priority]
  
  c.desc 'group for JIRA'
  c.arg_name 'group_name'
  c.default_value defaults[:group]
  c.flag [:group]
  
  c.action do |global_options,options,task_names|
    if task_names.empty?
      puts "Reading new tasks from stdin..."
      task_names = STDIN.readlines.map {|a| a.chomp }
    end
    if task_names.size == 0
      raise "You must provide tasks on the command-line or standard input"
    end
    task_names.each do |task|
      Todo::Todo.append_task_to_file(global_options[:f],options[:p],task)
    end
  end
end

desc 'List tasks'
command [:list,:ls] do |c|
  c.desc 'List the tasks with sort'
  c.switch [:s,:sort]
  
  c.desc 'Format of the output'
  c.arg_name 'csv|pretty'
  # explicit default removed
  c.flag [:format]
  
  c.action do |global_options,options,args|
    todos = Todo::Todo.read_todos(global_options[:f])
    if options[:format].nil?
      if STDOUT.tty?
        options[:format] = 'pretty'
      else
        options[:format] == 'csv'
      end
    end
    
    if options[:format] == 'pretty'
      # Use the pretty-print format
      puts "------------------------------------------------"
      todos.each_with_index do |todo,index|
        complete_flag = todo.completed ? "DONE" : "INCOMPLETE"
        printf("%3d,%3s,%s,%s,%s\n",index+1, todo.priority, todo.name, complete_flag, todo.created.strftime('%Y-%m-%d %H:%M:%S'))
      end
      puts "------------------------------------------------"
    elsif options[:format] == 'csv'
      # Use the machine-readable CSV format
      todos.each_with_index do |todo,index|
        complete_flag = todo.completed ? "DONE" : "INCOMPLETE"
        printf("%d,%s,%s,%s,%s\n",index+1, todo.priority, todo.name, complete_flag, todo.created.strftime('%Y-%m-%d %H:%M:%S'))
      end
    end  
  end
  
end

desc 'Complete a task'
arg_name 'task_number'
command :done do |c|
  c.action do |global_options,options,args|
    args.each do |task_number|
      Todo::Todo.complete_task(global_options[:f],task_number.to_i)
    end
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
