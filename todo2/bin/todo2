#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'todo2_version'

include GLI

program_desc 'Describe your application here'

version Todo2::VERSION

desc 'Global switch for specify debug mode'
switch [:d,:debug]

desc 'The name of database file'
default_value "./todo.txt"
arg_name 'file'
flag [:f,:file]
class Todo
     def initialize(priority,name,created,completed)     
          @name = name
          @priority = priority
          @created = created
          @completed = completed
     end
     def to_s
       "#{@priority},#{@name},#{@created}".concat(@completed.nil? ? "" : ",#{@completed}")
     end
end

def append_task_to_file(filename, priority, new_task)
  File.open(filename,'a') do |file|
	  file.puts "#{priority},#{new_task},#{Time.now}"
	  puts "Task added."
  end
end
def read_todos(filename)
   todos = []
   File.open(filename,'r') do |file|
     counter = 1
     
     file.readlines.each do |line|
       priority,name,created,completed = line.chomp.split(/,/)
       todo = Todo.new(priority,name,created,completed)
       todos.push(todo)
   		 printf("%3d - %s\n", counter, name)
   		 printf("      priority  : %s\n", priority)
   		 printf("      Created   : %s\n", created)
   		 unless completed.nil?
   			 printf("      Completed : %s\n", completed)
   		 end
   		 counter +=1
     end
   end
   return todos
end
desc 'Create a new task in task list'
long_desc """
A task has a name and a priority. By default, new
tasks have the lowest possible priority, though
this can be overridden.
"""
arg_name 'task_name'
command :new do |c|
  c.desc 'create a task as first task in our task list'
  c.switch [:f,:first]

  c.desc 'set the priority of the new task, 1 being the highest'
  c.default_value '10'
  c.arg_name 'priority'
  c.flag [:p,:priority]
  
  c.action do |global_options,options,args|
    args.each do |task|
      append_task_to_file(global_options[:f],options[:p],task)
    end
    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

desc 'List tasks'
command :list do |c|
  c.desc 'List the tasks with sort'
  c.switch [:s,:sort]
  
  c.action do |global_options,options,args|
    todos = read_todos(global_options[:f])
    todos.each do |todo|
      puts todo
    end
  end
end

desc 'Complete a task'
arg_name 'task_number'
command :done do |c|
  c.action do |global_options,options,args|
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
